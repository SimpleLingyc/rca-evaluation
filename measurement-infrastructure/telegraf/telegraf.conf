[agent]
  interval = "5s"
  metric_buffer_limit = 20000
  flush_interval = "20s"

[[outputs.influxdb]]
  urls = ["http://database.openstack.sieve:8086"]
  database = "metrics" # required
  retention_policy = "autogen"
  username = "influxdb"
  password = "rewtrewt"

# debugging
#[[outputs.file]]
#   files = ["stdout"]

[[inputs.docker]]
  endpoint = "tcp://compute.openstack.sieve:2375"
  timeout = "10s"
  container_names = ["ceilometer_compute","ceilometer_collector","ceilometer_central","ceilometer_api","ceilometer_notification","mongodb","horizon","heat_engine","heat_api_cfn","heat_api","neutron_metadata_agent","neutron_l3_agent","neutron_dhcp_agent","neutron_openvswitch_agent","neutron_server","openvswitch_vswitchd","openvswitch_db","nova_ssh","nova_compute","nova_libvirt","nova_conductor","nova_scheduler","nova_novncproxy","nova_consoleauth","nova_api","glance_api","glance_registry","keystone","rabbitmq","mariadb","memcached","keepalived","haproxy","cron","kolla_toolbox","heka","apt-cacher-ng","swift_object_updater","swift_object_replicator","swift_object_auditor","swift_object_server","swift_container_updater","swift_container_replicator","swift_container_auditor","swift_container_server","swift_account_reaper","swift_account_replicator","swift_account_auditor","swift_account_server","swift_rsyncd"]

[[inputs.docker]]
  endpoint = "tcp://networking.openstack.sieve:2375"
  timeout = "10s"
  container_names = ["ceilometer_compute","ceilometer_collector","ceilometer_central","ceilometer_api","ceilometer_notification","mongodb","horizon","heat_engine","heat_api_cfn","heat_api","neutron_metadata_agent","neutron_l3_agent","neutron_dhcp_agent","neutron_openvswitch_agent","neutron_server","openvswitch_vswitchd","openvswitch_db","nova_ssh","nova_compute","nova_libvirt","nova_conductor","nova_scheduler","nova_novncproxy","nova_consoleauth","nova_api","glance_api","glance_registry","keystone","rabbitmq","mariadb","memcached","keepalived","haproxy","cron","kolla_toolbox","heka","apt-cacher-ng","swift_object_updater","swift_object_replicator","swift_object_auditor","swift_object_server","swift_container_updater","swift_container_replicator","swift_container_auditor","swift_container_server","swift_account_reaper","swift_account_replicator","swift_account_auditor","swift_account_server","swift_rsyncd"]

[[inputs.docker]]
  endpoint = "tcp://storage.openstack.sieve:2375"
  timeout = "10s"
  container_names = ["ceilometer_compute","ceilometer_collector","ceilometer_central","ceilometer_api","ceilometer_notification","mongodb","horizon","heat_engine","heat_api_cfn","heat_api","neutron_metadata_agent","neutron_l3_agent","neutron_dhcp_agent","neutron_openvswitch_agent","neutron_server","openvswitch_vswitchd","openvswitch_db","nova_ssh","nova_compute","nova_libvirt","nova_conductor","nova_scheduler","nova_novncproxy","nova_consoleauth","nova_api","glance_api","glance_registry","keystone","rabbitmq","mariadb","memcached","keepalived","haproxy","cron","kolla_toolbox","heka","apt-cacher-ng","swift_object_updater","swift_object_replicator","swift_object_auditor","swift_object_server","swift_container_updater","swift_container_replicator","swift_container_auditor","swift_container_server","swift_account_reaper","swift_account_replicator","swift_account_auditor","swift_account_server","swift_rsyncd"]

[[inputs.memcached]]
  servers = ["storage.openstack.sieve:11211"]

[[inputs.rabbitmq]]
  url = "http://storage.openstack.sieve:15672"
  username = "openstack"
  password = "hrIy7g9cU6WL2rUwKovTBgim4HfHSOUyICAuvkGH"

## inputs.exec example

#[[inputs.exec]]
#  command = "/home/dummy.py"
#  data_format = "influx"
#  name_suffix = "_dummy"
#  timeout = "10s"

## rpc-maas scripts

[[inputs.exec]]
  command = "/home/rpc-openstack/maas/plugins/neutron_api_local_check.py"
  timeout = "10s"
  data_format = "influx"

#[[inputs.exec]]
#  command = "/home/rpc-openstack/maas/plugins/glance_api_local_check.py"
#  data_format = "influx"
#  timeout = "10s"

#[[inputs.exec]]
#  command = "/home/rpc-openstack/maas/plugins/glance_registry_local_check.py 10.0.8.251"
#  data_format = "influx"
#  timeout = "10s"

#[[inputs.exec]]
#  command = "/home/rpc-openstack/maas/plugins/heat_api_local_check.py"
#  data_format = "influx"
#  timeout = "10s"

[[inputs.exec]]
  command = "/home/rpc-openstack/maas/plugins/nova_api_local_check.py"
  data_format = "influx"
  timeout = "10s"

#[[inputs.exec]]
#  command = "/home/rpc-openstack/maas/plugins/nova_api_metadata_local_check.py 10.0.8.251"
#  data_format = "influx"
#  timeout = "10s"

[[inputs.exec]]
  command = "/home/rpc-openstack/maas/plugins/nova_cloud_stats.py"
  data_format = "influx"
  timeout = "10s"

[[inputs.exec]]
  command = "/home/rpc-openstack/maas/plugins/keystone_api_local_check.py"
  data_format = "influx"
  timeout = "10s"

[[inputs.statsd]]
  ## Address and port to host UDP listener on
  service_address = ":8125"
  ## Delete gauges every interval (default=false)
  delete_gauges = false
  ## Delete counters every interval (default=false)
  delete_counters = false
  ## Delete sets every interval (default=false)
  delete_sets = false
  ## Delete timings & histograms every interval (default=true)
  delete_timings = true
  ## Percentiles to calculate for timing & histogram stats
  percentiles = [90]

  ## separator to use between elements of a statsd metric
  metric_separator = "_"

  ## Parses tags in the datadog statsd format
  ## http://docs.datadoghq.com/guides/dogstatsd/
  parse_data_dog_tags = false

  ## Statsd data translation templates, more info can be read here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md#graphite
  # templates = [
  #     "cpu.* measurement*"
  # ]

  ## Number of UDP messages allowed to queue up, once filled,
  ## the statsd server will start dropping packets
  allowed_pending_messages = 10000

  ## Number of timing/histogram values to track per-measurement in the
  ## calculation of percentiles. Raising this limit increases the accuracy
  ## of percentiles but also increases the memory usage and cpu time.
  percentile_limit = 1000

